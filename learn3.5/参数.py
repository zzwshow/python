
#实参
def f1(name):
    print(name)

f1('zzw')
print('-----------------1------------------------')
#默认参数   注意：默认参数需要放在参数列表最后
def f1(name,age=30):
    print(name,age)

f1('zzw',34)
f1('zzw')

print('------------------2-----------------------')
#动态参数一：*args 返回的是一个元祖
def f1(*args):
    print(args,type(args))
f1(10)
# 如果传入一个列表,则这个列表是当作元组中的一个元素
l1=[1,2,3,4,5]
f1(l1)
## 执行方式二：执行函数时有*,把所有迭代对象拆分为单个元素作为元组的元素,
# 如传入列表,会把列表中每一个元素遍历添加到元组中当作一个元素
f1(*l1)
print('-------------------3-----------------------')
#动态参数二：**kwargs 返回的是一个字典
def f1(**kwargs):
    print(kwargs,type(kwargs))
#执行方式一：只能传入指定参数
f1(n1='zzw',n2=28)

dic={'k1':'v1','k2':'v2'}
f1(kk=dic)
## 执行方式二：实际参数如果有**,传入的应该是一个字典,
# 会把每一对键值对像不带**一样把指定参数传入函数中
f1(**dic)

print('---------------------4-----------------------')
#万能参数
def f1(*args,**kwargs):
    print(args,type(args))
    print(kwargs,type(kwargs))

#执行参数一
#f1(11,22,33,k1='v1',k2='v2',a=33)
#执行参数二
lll=[1,2,3,4,5]
ddd={'a':'b','c':'d'}
f1(*lll,**ddd)


#函数
def f1(a,b):
    print(a+b)

def f1(a,b):
    print(a*b)

Instance=f1(8,8)
print(Instance)
#(1)在定义相同函数时,后一个函数名会指向新的内存对象,
# 函数名是函数体在内存中的引用,就像变量赋值一样,变量名是对对象在内存中的引用
print("---------------------------------------------")


def fun1(a1):
    a1.append(999)
    return a1
a1=[1,2,3,4]
aa=fun1(a1)
print(aa)
#(2).函数在传递参数的时候是内存中的引用,而不是复制,所以l1的值是[1,2,3,4,999]










